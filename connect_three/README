1. How It Works.

For the first part, Minimax search is used to completely explore all the state space. The prove is conducted in two steps. In first step, we let MAX play first, and use Minimax search to show that the best result for MAX is a draw. In second step, we let MIN play first, by the same way, we show the best result for MIN is also a draw. This way, we proved that Connect-Three on a board 3 width and 4 height is a draw with best play by both sides.

For the second part, as a complete search take too much time, we set a search depth to let the decision be made in less than 3 seconds. Instead of using the traditional depth which is the depth of the search tree, we set a search depth for each column on the board, which means we assume in each column, we can drop in at most depth many discs. This idea is based on the nature of the game that the new disc come only ocuppy the lowest available space. We think the lower the available space is, the more important the space is. We would like to spend our limited time to search the state spaces related to these lower available spaces first.

We choose the parameter depth by the experiment extended from the first part. We do the same experiment except with board 3x4 - 3x10, and we measure the time for the computer to get the result, then a depth which lead to a reasonable time is chosen.

A simple algorithm is used to evaluation the score for the partial state. We simply treat it as a draw. Although it is simple, it works in our algorithm very well.

The advantage of our algorithm in part two is that it need very little change to the algorithm of part one to form the algorithm in part two. Just a few lines of code are needed.

A git repository is included. The previous rersion of algorithm can be found there.

2. How to Build

In code directory, type "make".

3. How to Run

In command line environment, type "java connect_three".


4. Experiment

The experiment is conducted in "linux.cecs.pdx.edu".

For the first part, the experiment shows that Connect-Three on a board 3x4 is a draw when we set MAX and MIN play first respectively. The result comes out less than 1 second.

We also did the same experiment for the board 3x5, 3x6, 3x7, 3x8, 3x9. Board 3x5 and 3x6 completed quickly like 3x4, while 3x7 takes 2 to 3 seconds and 3x8 takes about 30 seconds. Board 3x9 takes much longer time, but still finished within 10 minutes. However, I didn't get the patience to see the result for board 3x10. The results here are used in homework part two to choose the search parameter depth of our algotithm.

For the second part, different from the previous version, with the algorithm in this version, the computer performs really good. I tried my best, and he beat me easily.

5. Things Learned

The algorithm depends on the actually problem heavily. In our last algorithm, we tried the algorithm illustrated in the reading material. This is a genaral algorithm to acheive imperfect real-time decisions. We added a lot of code based on minimax, however, the result is not competable. I can easily beat the computer with that algorithm. The algorithm used now adopted some specific charactor to this problem. It need few amendment to minimax and works very well.

Fancy algorithm doesn't guarantee good result. In previous algorithm, we designed a complicated method to evaluate the score for partial state, while in this algorithm, we just simply treat it as a draw. However, the later perfoms better.
